// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Specifications.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SMS payments")]
    public partial class SMSPaymentsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SMS payments.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SMS payments", "In order to instantly make money transfers\r\nAs a mobile bank user\r\nI want to use " +
                    "SMS to send money to other users", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Send money between two registered users")]
        public virtual void SendMoneyBetweenTwoRegisteredUsers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send money between two registered users", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Phone number",
                        "Balance"});
            table1.AddRow(new string[] {
                        "92748326",
                        "100"});
            table1.AddRow(new string[] {
                        "95473893",
                        "50"});
#line 7
 testRunner.Given("following users are registered", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment type",
                        "Payer fee",
                        "Collector fee"});
            table2.AddRow(new string[] {
                        "Private",
                        "1",
                        "0"});
#line 11
 testRunner.And("payment fee is as follows", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Phone number",
                        "Message"});
            table3.AddRow(new string[] {
                        "92748326",
                        "PAY 10 95473893"});
#line 14
 testRunner.When("user sends SMS", ((string)(null)), table3);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Phone number",
                        "Message"});
            table4.AddRow(new string[] {
                        "92748326",
                        "You paid 10 to 95473893. Your new balance is 89. Thank you for using InMemory Ban" +
                            "k."});
            table4.AddRow(new string[] {
                        "95473893",
                        "You received 10 from 92748326. Your new balance is 60. Thank you for using InMemo" +
                            "ry Bank."});
#line 17
 testRunner.Then("following SMS should be sent", ((string)(null)), table4);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Send money from unregistered user")]
        public virtual void SendMoneyFromUnregisteredUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send money from unregistered user", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("user with phone number 92748326 is not registered");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Phone number",
                        "Message"});
            table5.AddRow(new string[] {
                        "92748326",
                        "PAY 10 95473893"});
#line 24
 testRunner.When("user sends SMS", ((string)(null)), table5);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Phone number",
                        "Message"});
            table6.AddRow(new string[] {
                        "92748326",
                        "In order to use InMemory Bank you need to register. Command is cancelled."});
#line 27
 testRunner.Then("following SMS should be sent", ((string)(null)), table6);
#line 30
 testRunner.And("no SMS should be sent to 95473893");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Send money to unregistered user")]
        public virtual void SendMoneyToUnregisteredUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send money to unregistered user", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("user with phone number 92748326 is registered");
#line 34
 testRunner.But("user with phone number 95473893 is not registered");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Phone number",
                        "Message"});
            table7.AddRow(new string[] {
                        "92748326",
                        "PAY 10 95473893"});
#line 35
 testRunner.When("user sends SMS", ((string)(null)), table7);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Phone number",
                        "Message"});
            table8.AddRow(new string[] {
                        "92748326",
                        "You can not send money to unregistered user (95473893). Command is cancelled."});
#line 38
 testRunner.Then("following SMS should be sent", ((string)(null)), table8);
#line 41
 testRunner.And("no SMS should be sent to 95473893");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insufficient balance")]
        public virtual void InsufficientBalance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insufficient balance", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Phone number",
                        "Balance"});
            table9.AddRow(new string[] {
                        "92748326",
                        "10"});
            table9.AddRow(new string[] {
                        "95473893",
                        "50"});
#line 44
 testRunner.Given("following users are registered", ((string)(null)), table9);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Phone number",
                        "Message"});
            table10.AddRow(new string[] {
                        "92748326",
                        "PAY 20 95473893"});
#line 48
 testRunner.When("user sends SMS", ((string)(null)), table10);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Phone number",
                        "Message"});
            table11.AddRow(new string[] {
                        "92748326",
                        "Not enough funds to pay 20 to 95473893. Your current balance is 10. Command is ca" +
                            "ncelled."});
#line 51
 testRunner.Then("following SMS should be sent", ((string)(null)), table11);
#line 54
 testRunner.And("no SMS should be sent to 95473893");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
